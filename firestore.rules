rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
    function isAuthenticated(){
      return request.auth != null
    }
    
    function document(collection, document){
    	return get(/databases/$(database)/documents/$(collection)/$(document)).data;
    }
    
    function isTheSameUser(userId){
    	return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin (userId){
    	let userData = document('users', userId);
      let adminStatus = userData.is_admin == true;
      return adminStatus;
    }
    
    function isDriver (userId){
    	let userData = document('users', userId);
      let driverStatus = userData.is_driver == true;
      return driverStatus;
    }
    
    function fieldChanged (collection, userId, field, request){
    	let userData = document(collection, userId);
    	let adminChange = request.resource.data[field] != userData[field];
      return adminChange;
    }
    
    function changinPermissions (userId, req){
    	let changingAdmin = fieldChanged('users', userId, "is_admin", req);
    	let changingDriver = fieldChanged('users', userId, "is_driver", req);
      return changingAdmin || changingDriver;
    }
    
    
    match /users/{userId} {
    	allow create
      allow read: if isTheSameUser(userId) || isAdmin(request.auth.uid);
      allow update: if (isTheSameUser(userId) && !(fieldChanged('users', userId, "is_admin", request))) 
      										|| (changinPermissions(userId, request) && isAdmin(request.auth.uid));
      allow delete: if isTheSameUser(userId) || isAdmin(request.auth.uid);
    }
    
    match /locations/{locationId}{
    	allow read: if isDriver(request.auth.uid) || isAdmin(request.auth.uid)
    	allow create, update, delete: if isAdmin(request.auth.uid);
    }
    
    match /organizations/{organizationId}{
    	allow read: if isDriver(request.auth.uid) || isAdmin(request.auth.uid)
    	allow create, update, delete: if isAdmin(request.auth.uid);
    }
    
    function isHandler(rescue)
    {
    	return  rescue.data.handler_id == request.auth.uid
    }
    
    function isAvailable(rescue)
    {
    	return  rescue.data.handler_id == null
    }
    
    match /rescues/{rescueId}{
    	allow create, delete: if isAdmin(request.auth.uid);
    	allow read, update: if isAvailable(rescue) || isHandler(resource) || isAdmin(request.auth.uid);
    }
    
    match /stops/{stops}{
    	allow create, delete: if isAdmin(request.auth.uid);
    	allow read, update: if isHandler(resource) || isAdmin(request.auth.uid);
    }

    match /publicProfile/{userId}{
      allow create
      allow read, delete: if isTheSameUser(userId);
      allow update: if false;
    }

    match /privateProfile/{userId}{
      allow create
      allow read, delete: if isTheSameUser(userId);
      allow update: if false;
    }
  }
}